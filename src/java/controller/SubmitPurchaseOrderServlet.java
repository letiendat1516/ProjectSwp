package controller;

import dao.PurchaseOrderDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Servlet x·ª≠ l√Ω submit ƒë∆°n b√°o gi√° - C·∫¨P NH·∫¨T th√¥ng tin thay v√¨ t·∫°o m·ªõi
 */
public class SubmitPurchaseOrderServlet extends HttpServlet {

  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
          throws ServletException, IOException {
      // Redirect v·ªÅ danh s√°ch n·∫øu truy c·∫≠p tr·ª±c ti·∫øp
      response.sendRedirect("listpurchaseorder");
  }

  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
          throws ServletException, IOException {
      response.setContentType("text/html;charset=UTF-8");
      request.setCharacterEncoding("UTF-8");

      HttpSession session = request.getSession(false);
      if (session == null || session.getAttribute("user") == null) {
          response.sendRedirect("login.jsp");
          return;
      }

      try {
          // ‚úÖ 1. L·∫§Y TH√îNG TIN C∆† B·∫¢N T·ª™ FORM
          String originalRequestId = request.getParameter("originalRequestId");
          String quoteDate = request.getParameter("quote_date");
          String supplier = request.getParameter("supplier_name");
          String address = request.getParameter("supplier_address");
          String phone = request.getParameter("supplier_phone");
          String email = request.getParameter("supplier_email");
          String quoteSummary = request.getParameter("quote_summary");

<<<<<<< HEAD
            // T·∫°o ƒë·ªëi t∆∞·ª£ng PurchaseOrderInfo
            PurchaseOrderInfo purchaseOrder = new PurchaseOrderInfo();
            purchaseOrder.setId(originalRequestId);
            purchaseOrder.setFullname(fullname);
 //           purchaseOrder.setDoB(dob);
            purchaseOrder.setDayPurchase(purchaseDate);
            purchaseOrder.setStatus("pending"); // M·∫∑c ƒë·ªãnh l√† pending
=======
          System.out.println("üîç Processing quote for ID: " + originalRequestId);
          System.out.println("üîç Quote date: " + quoteDate);
          System.out.println("üîç Supplier: " + supplier);
>>>>>>> 31e5107d6d34587f671590d0382a74961088ae84

          // ‚úÖ 2. CHUY·ªÇN ƒê·ªîI NG√ÄY B√ÅO GI√Å AN TO√ÄN
          java.sql.Date sqlQuoteDate = null;
          if (quoteDate != null && !quoteDate.isEmpty()) {
              SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
              Date quoteDateParsed = sdf.parse(quoteDate);
              sqlQuoteDate = new java.sql.Date(quoteDateParsed.getTime());
              System.out.println("‚úÖ Converted date successfully: " + sqlQuoteDate);
          }

          // ‚úÖ 3. C·∫¨P NH·∫¨T TH√îNG TIN PURCHASE_ORDER_INFO
          PurchaseOrderDAO dao = new PurchaseOrderDAO();
          boolean updateInfoSuccess = dao.updatePurchaseOrderInfo(
              originalRequestId, 
              sqlQuoteDate,  // ‚úÖ S·ª≠ d·ª•ng java.sql.Date
              supplier, 
              address, 
              phone, 
              email, 
              quoteSummary
          );

          if (!updateInfoSuccess) {
              System.out.println("‚ùå Failed to update purchase order info");
              request.setAttribute("errorMessage", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin b√°o gi√°. Vui l√≤ng th·ª≠ l·∫°i.");
              request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
              return;
          }
          
          System.out.println("‚úÖ Updated purchase order info successfully");

          // ‚úÖ 4. C·∫¨P NH·∫¨T GI√Å CHO T·ª™NG ITEM
          String[] productCodes = request.getParameterValues("product_code");
          String[] pricesPerUnit = request.getParameterValues("pricePerUnit");
          String[] totalPrices = request.getParameterValues("totalPrice");
          String[] itemNotes = request.getParameterValues("quote_item_note");

          if (productCodes != null && pricesPerUnit != null) {
              boolean updateItemsSuccess = true;
              
              System.out.println("üîç Updating " + productCodes.length + " items");
              
              for (int i = 0; i < productCodes.length; i++) {
                  if (productCodes[i] != null && !productCodes[i].trim().isEmpty()) {
                      
                      // Parse price per unit
                      BigDecimal pricePerUnit = BigDecimal.ZERO;
                      if (pricesPerUnit != null && i < pricesPerUnit.length && pricesPerUnit[i] != null) {
                          try {
                              String priceStr = pricesPerUnit[i].replaceAll("[^0-9,.]", "").replace(",", ".");
                              pricePerUnit = new BigDecimal(priceStr);
                          } catch (NumberFormatException e) {
                              System.out.println("‚ùå Error parsing price for item " + i + ": " + pricesPerUnit[i]);
                              pricePerUnit = BigDecimal.ZERO;
                          }
                      }

                      // Parse total price
                      BigDecimal totalPrice = BigDecimal.ZERO;
                      if (totalPrices != null && i < totalPrices.length && totalPrices[i] != null) {
                          try {
                              String totalStr = totalPrices[i].replaceAll("[^0-9,.]", "").replace(",", ".");
                              totalPrice = new BigDecimal(totalStr);
                          } catch (NumberFormatException e) {
                              System.out.println("‚ùå Error parsing total price for item " + i + ": " + totalPrices[i]);
                              totalPrice = BigDecimal.ZERO;
                          }
                      }

                      // Get note
                      String note = (itemNotes != null && i < itemNotes.length) ? itemNotes[i] : "";

                      // Update item
                      boolean itemUpdateSuccess = dao.updatePurchaseOrderItem(
                          originalRequestId, 
                          productCodes[i], 
                          pricePerUnit, 
                          totalPrice, 
                          note
                      );

                      if (!itemUpdateSuccess) {
                          System.out.println("‚ùå Failed to update item: " + productCodes[i]);
                          updateItemsSuccess = false;
                      } else {
                          System.out.println("‚úÖ Updated item: " + productCodes[i] + " - Price: " + pricePerUnit);
                      }
                  }
              }

              if (!updateItemsSuccess) {
                  request.setAttribute("errorMessage", "C√≥ l·ªói khi c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m. Vui l√≤ng ki·ªÉm tra l·∫°i.");
                  request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
                  return;
              }
          }

          // ‚úÖ 5. C·∫¨P NH·∫¨T STATUS TH√ÄNH 'QUOTED'
          boolean updateStatusSuccess = dao.updatePurchaseOrderStatus(originalRequestId, "quoted");
          
          if (!updateStatusSuccess) {
              System.out.println("‚ùå Failed to update status to 'quoted'");
              request.setAttribute("errorMessage", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o gi√°.");
              request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
              return;
          }

          // ‚úÖ 6. TH√ÄNH C√îNG - REDIRECT V·ªÄ DANH S√ÅCH
          System.out.println("‚úÖ Successfully completed quote for: " + originalRequestId);
          response.sendRedirect("QuoteSuccessNotification.jsp");

      } catch (ParseException e) {
          e.printStackTrace();
          System.out.println("‚ùå Date parsing error: " + e.getMessage());
          request.setAttribute("errorMessage", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.");
          request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
      } catch (NumberFormatException e) {
          e.printStackTrace();
          System.out.println("‚ùå Number format error: " + e.getMessage());
          request.setAttribute("errorMessage", "ƒê·ªãnh d·∫°ng s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i gi√° v√† s·ªë l∆∞·ª£ng.");
          request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
      } catch (Exception e) {
          e.printStackTrace();
          System.out.println("‚ùå Unexpected error: " + e.getMessage());
          request.setAttribute("errorMessage", "C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra: " + e.getMessage());
          request.getRequestDispatcher("PurchaseOrderForm.jsp").forward(request, response);
      }
  }

  @Override
  public String getServletInfo() {
      return "Servlet x·ª≠ l√Ω submit ƒë∆°n b√°o gi√° - c·∫≠p nh·∫≠t th√¥ng tin";
  }
}